workflows:
  development:
    name: Development
    environment:
      vars:
        FCI_FLUTTER_SCHEME: development
        FCI_CERTIFICATE: Encrypted()
        FCI_CERTIFICATE_PASSWORD: Encrypted(Z0FBQUFBQmdZQjZwdHJlNU9KZHFvdTZLdzc0T1g1cUtWSHNMc24yYlJzenU0TWFNd21ZR2RyRVhpWWt6dmg2aVFCay1xaGZZYzkzSDJ0YVdqUm1aOTJfc3JGenJRQno5U3c9PQ==)
        FCI_PROVISIONING_PROFILE: Encrypted()
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - |
        # fetch codemagic helper scripts
        rm -rf ~/codemagic-build-scripts
        git clone https://github.com/NevercodeHQ/codemagic-build-scripts.git ~/codemagic-build-scripts/ --depth 1
      - |
        # set up debug keystore
        rm -f ~/.android/debug.keystore
        keytool -genkeypair \
          -alias androiddebugkey \
          -keypass android \
          -keystore ~/.android/debug.keystore \
          -storepass android \
          -dname 'CN=Android Debug,O=Android,C=US' \
          -keyalg 'RSA' \
          -keysize 2048 \
          -validity 10000
      - |
        # set up local properties
        echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
      - flutter packages pub get
      - flutter build appbundle --release -flavor development -t main_dev.dart
      - |
        # generate universal apk signed with debug key
        '~/codemagic-build-scripts/android/generate-universal-apks' \
          --ks ~/.android/debug.keystore \
          --ks-pass android \
          --ks-key-alias androiddebugkey \
          --key-pass android \
          --pattern 'build/**/outputs/**/*.aab'
      - find . -name "Podfile" -execdir pod install \;
      - keychain initialize
      - |
        # set up provisioning profiles
        PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
        mkdir -p "$PROFILES_HOME"
        PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
        echo ${FCI_PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
        echo "Saved provisioning profile $PROFILE_PATH"
      - |
        # set up signing certificate
        echo $FCI_CERTIFICATE | base64 --decode > /tmp/certificate.p12
        keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $FCI_CERTIFICATE_PASSWORD
      - cd . && flutter build ios --release -t lib/main_dev.dart --build-number=$BUILD_NUMBER
        --flavor=development --no-codesign
      - xcode-project use-profiles
      - cd . && xcode-project build-ipa --workspace "ios/Runner.xcworkspace" --scheme
        "Runner"
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - milind.mevada@solutelabs.com
  staging:
    name: Staging
    environment:
      vars:
        FCI_FLUTTER_SCHEME: staging
        FCI_CERTIFICATE: Encrypted()
        FCI_CERTIFICATE_PASSWORD: Encrypted(Z0FBQUFBQmdZQjZwdHJlNU9KZHFvdTZLdzc0T1g1cUtWSHNMc24yYlJzenU0TWFNd21ZR2RyRVhpWWt6dmg2aVFCay1xaGZZYzkzSDJ0YVdqUm1aOTJfc3JGenJRQno5U3c9PQ==)
        FCI_PROVISIONING_PROFILE: Encrypted()
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - |
        # fetch codemagic helper scripts
        rm -rf ~/codemagic-build-scripts
        git clone https://github.com/NevercodeHQ/codemagic-build-scripts.git ~/codemagic-build-scripts/ --depth 1
      - |
        # set up debug keystore
        rm -f ~/.android/debug.keystore
        keytool -genkeypair \
          -alias androiddebugkey \
          -keypass android \
          -keystore ~/.android/debug.keystore \
          -storepass android \
          -dname 'CN=Android Debug,O=Android,C=US' \
          -keyalg 'RSA' \
          -keysize 2048 \
          -validity 10000
      - |
        # set up local properties
        echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
      - flutter packages pub get
      - flutter build appbundle --release -flavor staging -t main_staging.dart
      - |
        # generate universal apk signed with debug key
        '~/codemagic-build-scripts/android/generate-universal-apks' \
          --ks ~/.android/debug.keystore \
          --ks-pass android \
          --ks-key-alias androiddebugkey \
          --key-pass android \
          --pattern 'build/**/outputs/**/*.aab'
      - find . -name "Podfile" -execdir pod install \;
      - keychain initialize
      - |
        # set up provisioning profiles
        PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
        mkdir -p "$PROFILES_HOME"
        PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
        echo ${FCI_PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
        echo "Saved provisioning profile $PROFILE_PATH"
      - |
        # set up signing certificate
        echo $FCI_CERTIFICATE | base64 --decode > /tmp/certificate.p12
        keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $FCI_CERTIFICATE_PASSWORD
      - cd . && flutter build ios --release -t lib/main_staging.dart --build-number=$BUILD_NUMBER
        --flavor=staging --no-codesign
      - xcode-project use-profiles
      - cd . && xcode-project build-ipa --workspace "ios/Runner.xcworkspace" --scheme
        "Runner"
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - milind.mevada@solutelabs.com
  production-adhoc:
    name: Production - Local Distribution
    environment:
      vars:
        FCI_FLUTTER_SCHEME: production
        FCI_CERTIFICATE: Encrypted(Z0FBQUFBQmdZQjZwaUF4b2xuRmF6SVQ5b0k2QmJZRTVpY1U4cWljZVdBZXlXSGVra2F4TkRHSDVhNDBHRUZFLTY5eTdEbUZXa01XSTM0bUs2UDFvVFhjX3I0WFFObVpYTEpFcDVVZHlVcFN0Y0lEbk5SMHZEM29GWnd3OUF5dkNtOVI1ZUZ6UU1Dbm1LUmVBbGJUOWowYWZZS0E5Ty1COVFVMDJ1ZlNfamdQZ1FES1RTSGZVOXpzWmdYMktOeXpLQ1l2M0Q0UmpPalVZVHJwNmhmVWpJV2psdm9pNlc4WVVPNHo5T09teDFUelFDdnJhMzdManhoRUkyZ1VTVm1ITzdEa0U1TjBUV2llSTFZS2JIeFduTkNteS1vcUZlZDYwXzZXdjllSXRObTBsMFJwQm5wY0RQWW9jUGxCTHhYUk1ncUhXYVg4aHB1LXZjcmxxSmlVbkJ1dFMzUXp0Q0MycE9MSVF5Uzl1RHIyVTNRYUMwQkF3RFE4dHZhYVBaVXhENXBEQUp3VldhNGR0SnIzUkxHSGhCSW9yOFVlcFA3eVpOWnpucGhLTEQ0VUVDVEJRX0pEWUtLRVBwZXdBTlNOWmdCNmZyTGt0dEJabW1Vd09sVGtubFZFZjE2NkFzVXNLSlh3TjNOZXRHMS1ZVm4xTHFtaXhkaUZVNWZIUkxWNHYxNnRzaEJCcTNJYTZtYm1iVzBQek9fODB0NmFpaUlrNF9BVVNicWF2dFBQYXk4cHZhUnRKLWVBb2ZuTGpjNnUtTVBCTjd3WGx5ZEROUHVZX0RndERqd3I2bEFHandITHZCQzNsWllhUWFWdTYwcWRjN3NldWdZQnBfaFNDSWZaeDU0NzNQcFBRTFUzQ05BbERROUJ2akUtU3BhSXJQY3dTb1h3VTUweWcta1I0QU1sXzladS05M0c2c01nQ1RmNkJxRGc4eDl2T1o0dlQzTko1V2UtT291c2xLWDhuUHdlYUJIRk12OWtaemdLazlFNDRFa2x3Z05mSVdGWTI1UkJ0YmtRSGhNQW1Dc1Vvb05lbU8ydmlFTVpfTVdhYlpnaVpWWmI2NFhURGJsZDI5U0I1RmhhNjRnTUs0TUktTnhIVkZXeFRJQ19CRnR0Z24xWFprVHRrbDFaLTBqdndfcGJqbUM1YkZVcHpMRUdQQVlya2VUM08wUkNsbWJPaHM2ai1rZlNURnE5OEF0MU00VVZSOGxQTnczQXkyM1QzZFJhSUg2bUZmekRNWlhUMDJFOFFVNF9oYUlia0FDRldPejd1VE5OcFNLVDZ3bjFVUGpqVnNGU3VteXIwMVNsY3E1QjZmbXczN0VsWkZESlpyWnlMQ1NnakJHd3RmZXJPZTNiRzFMRUVndHBveE8zSVliWm41X01QSWRtNFRLN2xscG5iWkxYQlFPRURBU0VocFB3VnVVQlF2YVJBbXowaFNLOXU4MlRyTXZlNEVCdHhuUG5lSFRvbFM5akFTTXo2eFk4eDB3OWk3LTdUMlRCWUFNTlVNUEpCZ3FnYTVPWGZhYVg0a2NEZzdLMWd0V1ZYQzl5S210NDJ6ZVpDMERTZ1dLVkRDNV9CX0JRWkt6NGxxRDg3dkdDS0h5OHRIbzlMSGxSbkRFY3luY29FazZBbnJlLU54VEtqemNsWHZIdUZ3NkQ2dXpacXROMTRhYlM5RUtOVXVwaVgxcjFBOGx4SVNQZzM5WVl3NUxCcnhIMUlCU0ZURTA2b1g0VTgxMHpJZDltT2s1WWphNUVieFRPcmx1Qm5oU2hzanl3Y0pKakNXNXlXSVZxZ2RUQXZrTkpmaHdmVHlxN1ZRdE84YVU1VVZPWVYyTko1V3F4cGVNRU9vRnJtTkIwVUU5OWoyNXEySDNvTTAzOXN1X1ZzR2g4bHdWRmhzcjd1YTBCMlZWaDNuZWd4Tk5MM0xvbTk1QmRMUHhLNHkwNGJ3TTRibEVvcFdoUm9FTmJZbWxDbC1ybk5yckFkNXlQWGJhNkc1LUxpTm5MZE9STkZoMzc0X0p5WHljZ3pfbTUxMFNwU3ZiSjdsN2lvblBwRnRnSWNmWFBQcGJxRmJldjdDQ2xLTy1FY3hNMnFTWGNfUEM1WWtGTUVtT3JGOFpJWWNfRWdFQXdoOHBrZTZiMTZqWDE2VWJoN3JGTWRpX0tHUjZpOHRrdHZ6aXBBZ3ROZTFDQVFlWTJPMnFCekdPaDB1dWVNcDkwVUdRM1JpaEoyZG9lQ05kWF84ZTQwa0w0QkxHUDEzYndLOG81ZUJpeGl2emdMc3ZuOEdSazA5WXpfS2Qwamh0RUpVNzU4SjlNdkd1TkxYNVZESUhadEJUdGF2UGhidHFjdVI4RzFObXdsMVFMR05tTzhyRk5Jc25HYzNrODZvbi1OYWJZWnFsbUJ5aFdBbFdaNmtMTkpESDlvbXIxTGhxTGJnTEhRMkhTb054RDlwRURvTG94Mjd3OGt5XzQ1STB4bzhXSHk0Q01VOHpwM09ZMGZjMk5ISFJtbHNkVmxHaXE1UlN5cmN3S0FhdHpBendPMmpEVGxlMDlKRkYwVXpwbUV3RURpZ283RUMySDM5N0xlNDQ2UERGRGpfVE85UklYd1FlUm1NcGJRTHc4eTF0ME9ZQ205YVM2YU9MU0hWOTZFdVQ2TnZ5cjZHMjJSYzNKVk1LMnpqMFM2R3VmbEJnNU1xX0hNM2twdFVmd2Zma2RkWTVBZTFWS2E0NGRJcFRHN0xNWTh6bS13ZXItTXgwcV9HbmRTckZJSU05MjhpWWdCSlFYQ1VEdVMtRTRkdDlEaDhpSDJKb1hVeEpuQmdUSmd6S09zNDhqQ3BSQUxKS3ZRVFhqTWdHQ0Jscm5pY0YzdWFPRWdjdHFCU2xFbjRNTHU5Y1V4V3NNaGlmSlY5MGFHRDVSbm5XZ1ZTM2hUU3dkWlgyXzEyaGR5RV9pdDlOWVQ3c0dfZWkyYVpVQV9QT1dwR0FxTHpjYkQ4VmRWYy1vZG9YQkx5MVVQZUh3RC1ITkV5QWIxa2F2ZnBYT251eUlCRUJwR2tkbW5rNWVnTmNRaDNMdDZSa2MweTIyV1dEN3g3TE43bnJEbmlUUjN5M2I1M3JGbXgySG9GWndiYVNnd1B2QUpNRDFVSEgxbmZEdEhkSnZFWGZDeUdGVEdtdUhSbmIwNVlMR0VsajdsWkRfak1DT0FIcDZUWU03b3pkRzZzS1VPdFBlMi0tM05vSTlCWm1IRkNnT0dFNXdlVU10RTlGQzBUS2hnSnZnSEdSUUlJbEdRdkc5a2hmd2Jrck90TzVnb3lYQzhPbzhGZkZPSFpveUdPOFMwbWhKNUcyRUIyRlNXb21nT1puQWdycU1BaEZKMTRrcmEtTUFFQmt4clFGRzh3dnNHTEJNMVN1VjhGc3lYWXBZaDhvRlpwSW1fa0VNbHlLb1FUWE10TUVKMnlxMEtZNGg5MUJjU2ZsWjVPa2hJQ1Z4WXhyWExtZE1DdVJXQVUwLVJWUTY3R1h1VFU0bDBKUjhabmZ0Uk55RUVSSTZrdHFxOV9Lb3gtakUwY3phU1JxQUZNNXBwNlZIX0I5R3IwZGJsbkFXTndtTnZEWDVOeDdiYkxnbWpJelc3Z0ttRy1rQTBCcXBJTnVuelVqaGJMWmJYWGtVZVp0UGpjQ2NmRTNGT3NMdEJzMFp0M2JDeUdpVUlFakdQaXVlMTVxdXpTWlN4NVU2c0xrTUYwaUlMeW5NT2dBTG1lOURjdzRiMVgxd19jTnQ0MHRtZmdPQUJNNV9PTXBBTEtfWmxqVmNYTmp1ZnlDV0NXaHhHejh1LUFBQl9GUllXWGNPclFSTTYwUnpON0FaU1U4REVYUGQwWTNrclpfS0ozTjBBNG5QUUJ3Q1hlcWN3OUYzN0hPTU5XNTZsVVgtT0Z1RGtyS2dSM3JzakhvVDFsZ2U1NUVZeFN4RmpvQnZqNTBYS0RlX0ZobU1aVEl0dTkzT3V0TkVtTHNqc21KZ1BmTHY2aE9DUWRwb3VaOWdoYkVVdlhRVndTbEdEUG5IMjI4VDlFeUZhaXE4c3R4ZGEzbXJ0YVRRLUM1OFlNdWdIWmZNZk45R2EyaWFwTEJBYUdmQ3lHT182blU4ZGhGSUhyVnhReV9ieXZmRmczTkZrNUhpQWdmNDVwTlkxcVZIcDhVOUdpd21DUG1SNTRaV3E5Nl81ZEhFWElLUDNaSmhKQlhGT0tqRkxCbFpxaUR1ZW9wa1NHT1liZEdMdFE5Ri1ocW84emN3M0VfLXpOdGQ4T2YwSUlycDZ4THd0Zm5XU1hBQndGRExfN3poZEJ1TXhTR19ubzBMdFpKSTZod3phRm1JeGxTN0piaWFnS3cxd05xNmszLTQtdGpyd1RkSTJQTlFHRGJIU1gzN09SUkZOVHo0anJ1MUVuT1JEZF9EQTJlTFIteVdfcjE3TXJOeVVycjVfMXNIYTU2eTNUcWZGT25PcmxzdDZXaGkxU2pIcWJsaFpiaDlDWVlIdHZPZlpLVzZlbFBGb2FrNTlXZGk4ZzRoYzNjYjdVVTU5dm10WnVDYXdZSXNlUHVBVXlDUUlWR1NrQ1dGelBLa2xvTHFncXZOOFVNVzg5eWY1QlRZdEhCb29BUnNsZVdRZGhvVTJqSHBvTUd0UF9ZMUVSalh1SWpEZGlUZWxUQTNTR2s5b2FQRjVXUXdwNVoyeVFPUl9YU1ZpYWtrNnhjR21acndWVHI4ekpnLXZoOFFhc2dONzliZmhDUm94V2VLRkF0YjY5RXBLSGVoeG5wRW1ucUFNQlZYZk4tZVB6RU43OTRxblNtanlkc0VKM3Q3c0JRLWZuVjktdFhJNHZKRy1xMjVvTHpuTHBPMHJFMWNWZjhQdmNzbEFlN19YWDB5dkZDOUk2R0ctbXBMaFQyd3l2bUhlNzRoZUFLV1JteHV6QlRTU1l6RVR2aGRaU0s3UjQtX0dTRjN3UkM2WjVmTGZtYVB4Q2lIb25nLUNheU9kbFlLbUV4ZXYwaTRHeGUyVm5PaGJfYWZiR21jN0VqNXFGWjU4VWFGeGNzSU10MS00NU5FSmNKS05pWWduYVJZaTRfRVFZQk1Vc1owSXlSV3J5TG81ZktpZi1iS3N3OU42dkNYVjNDMjhrei1PT0N3eFZHc2dDc0FQd082OFJzbmtwRWVmS3J1TVVrNnJXLWZXTHlyTUs1Sm9RdEJBSGd6Z1BqZTAxQVpVZWNIcUNCN2xkamZZM2lCaFVtUGdZSjMwelRZelFVdDVsc3FNVkpKdTBGNEMyZU81azdRNjEyd0ZDdHRyN2xHUmZ1clNadDFITXNabDllc01WLTFZSjR6OVRrTjZseG5RQ29KQjM3ZjJkRkJ0a21IZXlwLUZzYUx1S1dubTVfTkpnTHZneWswNmhMNXFYYlFFTGNBVmkyLUc0VnRfa0dkNWJWS19ENm50X3NWcS1aa2MtdVZBTmVZY3FsSlRTLUdJNE5XazI5d3JidUxXRG1faXFBNTc3SWFIMldzaEhIcDh1cmQ0VHhzeGNJNzdqYmxYWndpcTlVOWl1SHhBS3RuUTA5QUJLS3hNd0JSNEpla2VRRVEyREZMeE9oa3hSelFNZFVoMzFBNTRpYW1XVmVTV2FMcFpNMFFGaTExdU5xTFdYRHdYcFRNNkRQRXgzYXNTclJZVWs1RUFBMkJLTi01b2tqV2V3Q3ViYVg3S3lGVEkwaUtEdWZ3S1MybnlrZTdoVXg3VVRhcEFBamhHdlVaLUZXV3B5RF9lT21HNW9ISTI1X3oxTWJISF9UZkpWa2gtUTB3bkNJS1AwQVdRWDl0VVg0bkotMElDTEdGXzZVbHJmMU50RlRBS21DcjMxNTVyaTByM0dUVloycC1MeUVSTDdaT290clZYQ0p3UlJXbHIzNExHdGxlQzBzWnEyZ2pUbFdDV1ZaaTg1aG02clZpSTFrbmRoRl90LWdKM1BSX3FmaFpHMk8tNlVnN3dldXpLTnBKSmJKNTEwRF9XVDdWcjZZdERvLTFPOVpqbDdaeEh6Z0NKZW1CN2RzLTdYUDE3VVRmWm85aEgxT05NM0hBMWFSeDNwNjhCSmJPWVhRNHBIVWxEWVFXRE9JR2RMU0VOY1hUa1pzRDJ4V05tdDl1UmtGamw2ZGRqYkJhNC1DeHp4TEpJSzdXRDVQcUNjakhHR3VvZlhqY2hGU1BnTkZkNzVsWkdaRVFnLUJUclpYMVhSZ2VaTzdTbm5pVXAtbnJsenJzc2JQQkVRUEQ5VVBxQjlhakxHU1dsOUJqQkhOZm42QVdmYk55ekVMVHBmdmJsMVdJdVRUdU1oOHE2US1CWHhKLXpBaXd6Sm1vd3ZhMlpXdHFzOHNoNlJCM25SMG1VWFdtRVREdGxpeHZhSm50UVliMW5SemhWY3dmV1hTNy1LSkx3MkhHV3JRbXF1N1lfWWtaZFptb0dsbms4SmxYYkV6VmNzWGZtQmhaTXNlNk1XeS1mMm5NNEtVTnVqMmREMWJzNk91NXJyRTU1SE1venBua2xkM2pFT1lRckhnMmJ3SGh4MldFX0duaC1TbXZ6Z2pZbHpmQTV3eWwxd1dSaU9rTGZ0TjlaYkpHdnRmWkhnT1czNFJaVWtFOHlENklIZncwTmVoeVpMVzVWOUsxZzJYeVhSSktKZjNTZ1lkcE0wVGtzaFZfTVFBVDF4RWJIc3lDODkxa3pwbzN3c1BROEg3ZWxiTDVGZFVGanNDRVdGMmNUc3Y3eHpWXzlUS3ZFQ2l1V0NmQTYwTGZoa0FHZ2UweVU1ZWo3Z1RuLVFtNHdJSTIwZnhNRjkwbmJ2SENhbjJxVElCSnpRV2NHelRLODhLenBPaE9TMF9qdnI5Nklva2ZWSldKdGZLSklSQzRIUUVJVlJ3OXFPVFNXeFpPMUJ6Tmlvd0hoa1pjZlp4bWhDWGtxbFJBM0M0S0xmVUZ1VEhTM3ZsSFgwbUNxYUxEdEMwWENoaU5zUFZLWnd0NTFLSjJScjJabUlhMm5heU5hYWhFWDMwa2tQY0x3dDFWdnlmRWU3a0JOeWR4R0VOaTF6dmJ3d0ZBUE1NRWJ3UnZrOHRyNnlyWEdYcXRPajlSXy05ZzdFUUtuX2pQalNDR2t5cnBrNkpqUlV5VUQtblZ5b3JJZF9HVmtYX0RjbWxuaFlHQW1wZ244aWp1OTQ5SFR2X0ZLdWdHOGJEQlBkOHJnLWg0dzdIM0xHbkh0U0hxeXpZZlVsMU03Nm1yMFU2emVIbVBQMmVURm1EZUJrbFplZThGMjVzS3JJT1ZQY1lCOUE4S2Y0YlhuNlg0TkZMRWVvdDhUdmFxcm1XRVJDQy1EMXhMRFBXX1N5VVYxaHA0T3ZVZF9Ua1AzNXJZTERhX3NqbklHUWtOcW9ITWVyTGZXYmZCWGc1a3hOZXlpWDNveTQzX0tEbmpDd2sydlV0c0R3Q0J4Vzh3RWJzNVNtbm9ZTmVuNG85LWFYNmt2S2gxZmF6VnNpX0wtNG4tZVRLRHlFOXozb1lVUUdwdnAxREtsRmR4czdneWl6dUpuMElRbVNEMWVycnF6RzBWbk4zcU94UjV5Y1dVSjdtbkNsU01KX2U2OWhhQ0FsWkNoUW8yN1J4TWUxTDBxZ3hUWUJEYjRfZ00tSHJCSkxNeEFxSUV1cXFxeE1ONmxGNWpIN1VfMjlZdmI3UmVLZDdiQUVJRFBsb3RXaHdGZ0gzM0NpTWxKMWt3RWFyMGlWc1AzWVRnSHhoUjgzR0pTdW9QenE0YnE4OW5qY0Zsdm1ta2ZNNlczcmJzQ0Vra2djUVFXcU9NNnY3c2tKZlNCcHVucUZsd2lmZmV2VzhfZzMteHl2QzFILXpjd1pxemZpSGZwV3kwVzNnQzJPMUljTmxhN2pxSXJfQ1dFN0Z4cXJvVkdfY1dUWUduUTI3X3VsMXhuMHlVdlVlOWoxQTNFa1lRRGdhZTBTcVZ1NFlBaTZDdV9yOFpQZjNyNlEzRkNwTU9HLUFURG9QcjJTai1jbnBEbzZxWTIzbGU5bmt0TUFLbUwybGp0SVFRUFVKNEthRlZsOXVGMg==)
        FCI_CERTIFICATE_PASSWORD: Encrypted(Z0FBQUFBQmdZQjZwdHJlNU9KZHFvdTZLdzc0T1g1cUtWSHNMc24yYlJzenU0TWFNd21ZR2RyRVhpWWt6dmg2aVFCay1xaGZZYzkzSDJ0YVdqUm1aOTJfc3JGenJRQno5U3c9PQ==)
        FCI_PROVISIONING_PROFILE: Encrypted(Z0FBQUFBQmdZQjZwQnFfdkdUaUUxNUlvMWh4WTJ2RFVucGRxYXZkUi1QdFNPLUVwNS1sN1JETzlhU01WeUNWT0VfX3A0cjl0WlNuODllTGZLZ1FPUlFhby1IWlZnQkRST05hcC0tS21CcmVwTnBUNjhPZVFoWWtNU1RBcllZWUhOVG05XzBiSHVQbGJ3SEtXM0dETmQ1R2dSUU5USngtSXlkbTFRY2JPYUxzZHFQNHVJenBaMUZMdi12UE5nX2wxbnJ5YVRoYzdCVF9kRGp6d3duWmJPNlVfTUplbFEtcEpubjFRYTRVS1hqNW9IQ25qSmQyazJPdDBBbmRDYUktMkVrME1fUGV0XzBKcHFyYjZVUm5rYUpCX3hrdy02b2FuN1l4SmFyQjVqTmlpNE1scE11bllVejRKM3dVRUpCU2xDREdsQ3JxeUNzVk84U1pmQnZmS25wZ29IaGpXOHUxNm9tVTlLa2c2bXRNNDBJVkV0YWw3SFVsdFk4blJseGNVcDdlN3Y1cEZFWWlkNS1icWUtQlhwUDI3bFBZek1kdmU5VjBkOXAwd214UmxzdklIVDRqcncwTjBNVk1pRzBkUlZxVjgyQ1ZXU05qZmphaGlYeXByeTJHRTlkR1Bic25Oa3VpcWM4bmJTeW9ZTmpwVDRXMmtncXNIQVBxMllMaTRtSFNOYmhQRG50UmY3VHJqdW5uTHRLb1dWMnpUWU9PTG5hZVJGdU9fb1FGUFVic0s0YlZOTEczM2dnRjFyUGw0Vk8wYXRyU3d5QlI4VmtUREtvMkdfQjlkeEV5d05jd2hyMkF0SENCUGtnXy1MZEhnaHhrakhFWWdRUGI5enBqWGl2QlhuanZFbllKelg4cTJLZVlHN3lDdjd1OUlKWmZta0ZvM3hDMWgwZnNKUjR3b1J0bllYLTNjSGU4Q1Z4ekxmcFBTUDIxU3YzMVpSLXVpWVU4b3V6N0JVbGdNYmRQUE93N1Aya2t1V1JVOFR6SlNxQllEbjM0X1pxRzlfbkFfZGxJQmVlNHFXSElnd1g3NHI0ejBHOHM3ZExNcVcxMk5LbzgtOUROREtqeWJzS3RGcVlMNF9TRV85Z1JsTHBnR0V6QVdRU2FVcEdDdGpieXRVVmRRbGkwOEg0ZEwwOUhaenBnWHRyd3ZMVjNLWmt0WktteGRoeXI1eDB4N2lwU3h6dFFtNEhYdUM4NHpWd1EwcUgwUlJGeWNvdEdETnMxdlN0MEZMbW44Qld5T2hBcjlJc0ZobjZGdlExU0h4UUxkUDcyVjZIUDV1WlQ3d0pOcFJaYUZlR3RHNzE3N0hkMjVjbEVsNEJ6RWU0X1dHV2M5WWJ0Nmc0V3h1WENnMHFuckRoNy1lN05DWUdRdzY3ZDctMm9faG93Tm1qR1dELTdyV1lDMDgwQ2UyODlibEw4SFFkXzdlRV9PM1FRMUNXaFRMSHc4T0pSd2FBdnQ1Zm85ckJKU3YwZ1cwUkJFOERycDRxZkdRTVVLYlpwQUNGbTNFVzdOZjFLRVR2dGVVTTNZYzhkaU1taDZiaUVhWnBES0k0N2FsdTNwcktUZkdjTmxqOTZ6LUsyX0NMVWV2RE9UUFd3blc0b2NiLWgzT3FWSmxfUjg1RUo5TTZLekpDa0tvRHZLeFRSWWJOZVctT2RjRFp2NnkwTXZVdENIWUJVODQzRllHZ0ZpakM0NTROOUtfVkc1UWlMZUFjY2xrWC0tWDJ3ZUZQR2N5SmUtdXRfZTU5b3lhOGM1NzR0M1Y5WmdZaTJnc1c1bFJDTzBBVi1rWHotQkQ1RFZoVmRTM3ZCUzZnUjRKR21mTUhWdThISzdvUl9HVjZTWGE1Y3BMMDRoM1J3T3FVLVNSZTZmc1BhQkZ1cXE2UW9hTE1pRkwzc01wSEdPUnhyd1czYTJkaG5zaVNFdkxYTXVoNkV0OVYyOWl1Zi1WWkRhUVNGOTdjeXNBVVVwN3A0Z05udUpRMDZNOVpiR2tyY29nYlZic3FwaWR0WERacURBOVJILUNBN0lXNHZxTlF6cE5vQ1R4WWFXc19nVTNsQTVsblpVbGpTMWFsRlc5bXl3WkJ4d19ZWVpzakJOWU9TejZlcVd2cGNUQ1BBUjZ0ZTV3dXl3TWdKbzB5dHFfUzF1eVpEeVZScVF3a3F3dHVHZjB1bjZUdmhWTVlFUG1GVjh2U3VlUl9XWUk0M1RsQm8tQjRFWmVDMEhyUHRyVkgzUG1QZUc3YUlHdUc4QWxzTE9RN205dUhEclB0N2IxcVFKNVpyeC1uN3oxQk5ndFpIQU9ZLTlJMGpjLUdNZVI2TXR2QkNMbHFBZW9WeUYwU3I2UTdTZVNUZkZnQjNSd2JNQnNLVDVaeTdyQ2lzbVgwdlRPYVJaSXJDdjBUSmt2XzJZNFJYVVVHbzdFclM2NDg4ZWhkdGdJU1U5cVVUT2o1SFNjV3QxNFBtcnphU2JSSTdtVVJZamZodlZCQ2ZfczBZUENIUXRHdE5pZXB0ZDBUMFhneHUydG1xNkVpazNUZTFSejlFSXpvVWotM2Q0cm9acnp6RWFVcjZZZThLTmQxeTY5bnI0cy1tZlAwVXV6YXoyMGJsNTlOSkp5a0Y1X3I4ZWV0MXFlMUx4TnZfckhZS0hjNmNnb0xhUmtsZzR5RTA0T3kxOE5fQmxIdU1lN2Yya2dHNnhqWC16T185STBYUnNickd4RUJLTWc0ckc3UHBMWlRRd2tKV2FGQmNyenZaTm1BX0ZZZFl0S2UwREZnM0s3NEpqbEg4Ty1TQWREbXlINEh4em14Wkl2UGx3VFlhMkd4dTVHRzZZQWtXNzEtbTFlWnpGYUtNQ3h1c2JfU0hqQjZmYmVzOXVGTG5ybmVDRWdXZGc1UF9Uc21EUDRRd0U1ZGNjblhmbldMeUpmZF9TaXFMNzBSVi13VVhmNjc2RHUxcEdIT2hxNUVFNUJSR3dKRVFBdkkwck5tUkhjSF9qVXhWS1FKQzhRV3ZjZzBUOHpnVTdtMW9GTHRfOGJjZHh1Ny1yREVIZkdGX1RMbDNlVjFxcElnUEQ5ZDBjdGpybmNzZDEyWXpNZDFBR2gzZzltUDN5NldoYkV1d0VRQUhZVkpya3hEMGZPenR5RE1LRGs0OFFUMGgySnlGY19GRXktWmhoNzg0SHBZcUc2QXpjVUsydnc4RTQ1Uy1lN0Y4MjVXbzBBUmRyNmlkMEQzMllONi1kTVRfX0k3eE9QczA1RExMaHY4cTg4QTBuZjN5VmhGaW5CSDR5dGtYejI2OUpDbXFYa0NDdHpjV3FOQVBFMktVNXVUb2RoZG1GT05vdXgxRFhDOW1UQVJsbWpDNG5kMjBleXMyYmh3S2NPaHNRSEZIaEtGOUlTdmlmRnpkTGl2bDhBSXNHMGFwdDBRbl9pMFNmOWtVVzJnUk9lQ0pZWjJxOGlsMzNFc29PdmpkQ09UaDI4X1RZaUJIWHd0V0FvbDlZX0NWT25nYk02YnhiblJ0cnVyQ1hSckZfWTcyWnpUNUYxSXFiU25Za0dxcjQ4Y25XZmhxZnUyVWZkNFFacTNEak96UjJNVjZOOGY4Wk5WSmhlVDh0VXNpSm1FSFU0YkVGMFIweWI5WF9mNDlGMmE5MU1pQ21vbTdqc2VkRTZRSnhMTGNTbjhDUG5PV0U3eU5IYThSMEVlcDlReHFVZWdNWTkwcGpfTTNOUjJvNlA0XzVqZVNlNmFWNFdkNWxtMXZrdzFJRndqNk5LM1lONzhmRFFIUk5sVm4xUVJZUnhyU0pTTHJXYUZiWHJqY0VvVEJVUkJvSkFpdk5CRTduVFJmaENkWGNFNWFaajNmM045aXBVZGdLSmJWa2ZNakdQbHZ0aV9KLTByNjR5d0pzMGFIajl1QzNZVHVQTDRCTnNCQmdEQ292VVF1VWJSYjM0SjFlRV8yZ2xKWUNnMHZTMm9nU1RCcjhydlctNHEtanoxRGxfcGpDcmNNZEVRQTdBSFRwVnpJMlFOR29mT2JiOGNYOXNTU3RQYWUzWnBfWElUQnNlbkpVa0lmU18xZUtER2lZYXZaMzJSUFRRX25PcUF4NldSSmxYakExWUw3bkplSlpzYldxdXlDTGF4ZERuOVlJS0lKNlN0eVNuZHpmSzhKYnJReU9Ccl9Gbzh0TloyaXJjMkFHRU9iYWpiNmZOdEMxeFF3eGt3TlBZWjBfSEV4LWR6U1JHQzgtaDNUQ0hlOWxVYUhPUEFUalZwdzZ4ZkhPa3NrZmxkZk9tSC10X1BwWFMwRmQ3b3hBcnJQaksyRzJ0ZUQ3QUIyZjR0OWlRa2xJRTViMUcyTFJvQzN6UGZabkN3ek5YYlVIaFhUVGg2Qklkb3ZRb3pwX2FvdWxUMm1iaEJRTThCSnV2RXhxMzFjSXhNYWhuT2FnSnQ5YjE2eV83X0w4WEtmZ2RBWEY5clFkUllsZkpVY2NkQ0xTY2M5MzYxcFZvaENDRzZLcEdZN1VyZ0VWZnVaSzBQb1NEWFRxcHpnR2FFQXRGbUZhRVJWNUstN1RubzV6a1I0VEczQk1FelZrSVlkQUhSQjk1eURDT3phWml1NWpUYkhsR0s0Z0gwakdsa0prQVp1WFJxcWVoQm83SlNnUWZRU3dwVHRfM0k4aXVINlhIRzAzancwSm5jSVk1TDJDS2JrQTZtbXRNNXMyWFdPaTVWWjY4dHJSTFp3NkpTQWRIVEQ5U3MySVN4UzR3SGxsXzBjeF9BbmpaUHNtT2VXZWtIVS1GLWo0WXZvcjhzZTJhcFFUZ3FYeUhDT3poQUYwRTRtRHVqejdheFZLcDJxb0xILURGQ2F3dmp6YnFMbjdSbng1N0dwVnNxV3g0NE9weGJOeFVWTkU0aUdHTV9YSUFQVDNZTGFDYld3a1NhNGJpbXppcDF6U25EN0dScktsQlRTbk9uLWNxaTRxOVIzTV9hOEh2MDJCZmM2NUs1U09BMmYtMFM3NHg0ZmhOa0tXazRSNWI5dUZIUk9TWnExR3d5dUpLUllmcU1ubW9FZUVQU0IxUlQ4OGh5VmdwM0xBUjJlMUxGeVE4a21nVzVjU2dNVzJNYmJxcG1sMHp0SS1naVUtWjJLZU5qUHRMZk5rZ043MktwY2R4U25zSzRLZnhsNEpISzJORU1oQWdxNC1zVHFSa0xncWJGU1VxS1hyQnRPamVzWHp1ZkxWNkhMZzdUZGQwb09vT01HTkZtejRuWFdpTDdUdWtIZEFJYXBqM3ZSZ2psOTNON3RfOGk4Y1pSUlZmWFZudkZtSm5LVUZxN2Z5S24xOHNSWnRSQ2N4dmxROWhqY1ZKSk1NY2NMN2dCcEJHN0NldThOdEFuX3dUbTdjdTdmVXVQdjh5MW9sT254eU54bXBaY0FmTHBOeHl0ZFRUcUVBdC1qSFhsLVlFRVd1bktLampWSF9DMFdvRnFJYkRmSk12N3JZTnlVYi1LbHVfSjltYTRmUFJrMFAtckNPemxONC1KM0JPWjFqR0dXN3ZiaTczOUNHbllSZ2trOVgtLVR5eldmMWo5dzBMQWJHNlhsOWU2ODJYVzU4cHVsZnlmelcyVENOZnFLVGJYdEVicjJSLVR6a0otSVdXRHIzeXdpamJkR3dkR2paZ29pNG5uUVJrNkZqX3pLMm1aZmJXOF9wZlNweEU2dmk3YWQyVWNSRnRKTTBLUmxORzRkLXhsTW5JMnpmQjBsWkx5M3c2bFRXYlc1djAxQlZNcW9scXprQUVFSkNQZW5iOUE4RzhNMk1oN1NMZnZnbTc5YVZ5MnZwMHRkbkEtRkw4UlNsOFdTX2h2T0FtWERFZFoxRUI0X2JGMlVZSXBldzJ3ZlBhNFJBZDZOa2ZiaGVIb2htbDdOWGFNMXIxZ0pMcmRHMmxUVzZUYV9OclljUzdZZzZXSXhzVUFWNmQ5Slc3UmlSWmlKU0ZyS0NFdVo1dVEwZ2d4bzItQUJEN3h4dGJ0U3ZEcUpxN0poYXlZMzAzc1h0VUFyUkFxb05iMGFXT2J1SmpCNFU3bTRFbXZZSTcwZG5aWWc3ZVVGWmRodjlkOU5xVXJwZWVPN01nbWpaVWlQUDAyMkxxR2tjQWRhaTU4Vy1wY1NQZlFlYzJGVVVDOUJvemQ0bkpuSnp2eUU0ZFBtV0ZyTTExSkFZeHk2UVVSN2laMTFBY0FpbHluUjF6VTJoZENuUW5faUFIeFY1T2tEMDhOMmFJaER6WkhOdnkwVktDYlBWQTBrSDUtSW1YNWhPRVp5Sk9Nak5MaDVWVWZheGotcTVWd2NmQ3M0S0p1bFB4ZFZlbk8xOENEWEhyRFhiNnE1cThVd1VNU0thMDR3LUZTOGRKV2lmTl9IbF9SSlo2UThMQmlZVldFaHNRaW92Sm5rbnNyMmlIVzBhTXpIVXJWQ25LU2VYX2hXZjJZdFNEV19aSTkwSDY1R29acXZBYmJqTl81Q0xlUEg5N2xaYzF6bFRWYnBadzJfb2t0WXY0Ym1xdl9UcXRtOFhTNGtCUm9oSHVWT0lGTUM1NmpiOFBwcFdadk5NMS01TWxwUElxa2YxZy1JSFMzTnRxWmRMUTFBOHJlZTd4Vkc3REl6MXpNcjFXMHVCalVGZnQzOV81TDZ5blY4ZFpTZXp5UktNR0dWSXJDUFdQeER5WlN5SVJDRGs4WWxOVWtWeDdJdmRWdlhtcXd3RUtfdDdMbUtHU091SmItTENCUWtXd3ZqekJadUEwWU5talRCTkJ3RUp1cEY0RWxDci1ZMTRpS0pMLXFZcXFXM3BEdnFzNmxaTFBTaFA1c2t3Yl9wVXQtOHhVUlJvLTBrR0x3di03d0NSclBwZ2wxM3FNOHJHdjJ5Y1JYNGlTVHpDQ1RQY0dBZUFnSEtYaDM4YTN1bFFzM0dFd3BvNmNSNmlzQ29ET2F0c1FRNDZndHZZbWw4UTRZVDYtTUVQYXZVd2hfbGVQY1czakVMdjFDOGE1RmFGVzA5R010enZTU2ZaaC0zcGltbE5UTUpXZjV4NkZrZWJGeGhnQllGSUtlSGxVVFVVNFJCc0NsOW51SzBXcG8zdUNIUGRqdXk3MGFhRjl1c2VtY2QtaThOY1lPeV9JN3pjLVllMFNBdlhSbTBSX3Q5QV9fUGlLLTdIdnhVOENkTG5PMkJtVXZ0c2dwM1dpWkkzMHhmUkd2U0pXVV9JUktiZnRMSnNmMTlXb3JOdm8tMnMzOGhHSXBnWXVhTVFNZ1FRbDd0d0ZhQ0VnUG9mT3AybUVoSTZ3TUtNcUJ6VzdYbTd0WlkwNHhPZGw2UDZDYy1QT0N0OWgtd0tydmRtNFZtc2ZoeGdzcXE1bGR0RVFGUk1BOE0xcm5YcXU5RHlDZXpaQzNIQVdtMFFKSXA2X0xEOXN5Vll2MkNWb3pmRnpsOXBRZG5ZUHdPejhSLTdnejBiMUd4YmtHREYzMGplZXRmNlI3YTZrSkJSRXZhSWVhQmJfdlV2ZHVqZ1ZqNWJ2c0FfeF9GcFpHM1ZNM0tBVlp2WC05ZUhCMVl2eE9GTW9XX1dXcHpBTGU2T0tlV20wMWJIV0lhVmFMQ05JNTJOVlB2X2lOelNBYi1EZDk1M21UNGZJamRVUUVYZzhNcGRUSy10T19ValNFSzhSejk5NGRFRko5ZHZaWDJ5VGFidVY4c24xazZxUnhQaUVaTjB1dGlqbTFsd0E3R2pzQl9zWi03X0l1ZG5QUUJFQkZONzBISXBKS3RYendseVBhUUt5OXp6XzlhUm5xSG5adnNWanByTWZWU2pSc29zdnNOZkxoM1E4aGh1OFRsLVhwNzkta2xvdFNGRktBZkRjNGJkWHdlSVhVSThUWHVmN1dOYU9BdmtXdnRwUFJPMTQ1NjB2VGVaTzZJRHRvNk9DVWMzQlRReUszeUc2UG1FT2tlVVhuNFJFMFdnejNQekN3Q3pzOHhjT2k0VkNFRlZYZkF6NGF5S01DaU1xdkItbEJGeEtyNzFucXMtSk4waVhaN3p4WlowazdpMlBscHhVbGpsa1U4NE1mNktYZC1na0JXWUxzMDFRUVlMU1p2OU9hcjdCbDRreEFaTkxjWmliYUo4eVVRYzdBWXQyZHNHUjIwUDlUTldldklENGlfRkZNRDRJM2xrRzJPQ2o1V1ZvazJBdzdKMm5tTXZILW0xVnN1anl1S25SMldjb0VqU1JMVy0tS21RM3U4NEc5SEdQcE9uVEg1TkN3VHA4Z3JyVGVoZS1fNHVyVXdCaFRLbjVFNmZCWUFheXhuX0lyN0hyeWpuMGxzOGVrN2J2UDQ5ZUhFY2NORkhvcWUxcnlwdmZaX1NOWmtjNFdGbThMMkZ2VWxUWVQ5eWh2NzNsbWZJaElZR1J5c3Z4cXlpdnlVN2phcDQtRU5mczB3RTJvVnRBbEo0NDM4WlBPT09CRDdtNWlqbHJ3MTVWTmE1UENxSmI4Vi1vcU9mSzR6S2cyOFAxQkZ2SWxJdi1ENjR5c19qOEJQeHdnaFB6bk9zaDZsTFBGc0F2eVV4aXRNbHJvUmdXa01WbWxNRUJQclk1T1RET3ZpLWMtNDdVWWJ3aVRCN2ZMd2VkUkZCRDhwVzFUVVc1UWF6UWsxdGxqTjNieENLZzFiR3RDbnEtc3QxNWtNNE1ldm5YZXFBcG5GZVM1SFNhbkVZaTVOZGEwWm9JcXQ0ZjhCMGZ5dml5aDc2V0NPMHJnZ3ZFdEs2ampRVTBWanVxaEo2NTZLN3lsYVc3RWxJUThWbEtTOWpjUVlTa2d6cVduQkdOam5RcW9FZjRvNU9sbUItUGtIcjJVdjUwNGVwQmZ3RjNGNjAzaHBfeTl3SUYxdVEtLUZyWXFFNS1hcnZrTFZCcDhJaFJoMHhPLXE4ZWFJdTViYUJDUzQxbVJXcmhjRnowTmhtQ0EySThmYUFhUURWdmdwc3Budk1QZGhiTW1Kd3M3X3gydkdQempBZGJlZkhfNVRJTkV4SmY4cV93ZlRmd3NqTXAzc05iZU5qaTFPN3ByWHdIX1VSVHEydmFrN1VtWVMxekxwTU8xeWs4LUltSWFIb0lHbmdnVk9IMVhLbkRNSnJhaUxra29odFljM3RsRXR2Mkl6UmQyeUw5RHE0bEh3RElnM1Jsek01OUczTzc2RUM0WUdaQUUyT0FvUlRXUWdzTEFsTFk1NlVjN2cxbEctTzZXSFc4M1FWZjFXdnM1VDdraEc5cGlzTTViUTQzeUM0cXp4MFVDQmpjUzBoRVBEMFRMQ3I4UkNKVUMyeWF1MmxNUG9WWkRvLVg1OGtCZ1Bub0RTX280bXRpaEl6Z0piNTlzeXNkNW5yUG1jV2JmQlFwX1RkSUVoWm80V3BUV3hDVXdhZ0ZIbjFPa05UaFlFbDdsSWhLNFBtbXFjQkJvd0p2WXJ2YlJtV3hneDNfZ0RhMFhZVHRnSWlhQXl3SFcwVVU0S1pFZGdYTk8weTEzdlU0TTVXSWxUWDBVdHl6bGpUbXc2dVVzZUlKNEIzMkdsMkRFMnVfdkRfSDgyMEtVR1ZBUEJGenY4ZW10a3dmWFpIdnR3RkVHMWZiUGVXcU5sTUg5SC05d24tWHJ2WEVrSkFQN3ZRTkdkR0VJZ21sRTR1NkpQZEk5WFVVZ1pZN2dCSDhiczVpc1RQeDZhMUcwbzhJMmR6ZTVBUUhqU0w0UW5ZWENaWWZpei1QVnl6V0FfN0FuR1ppclZ5ZE03QnBubXlqaHZETTd0SVotZ2VZdUZyam82UW5xOFFsM2c5eWI3eE5JRmt2QXF4QXhxMUVtdFJzcmgwbmlVMG1VWHQ4X2RPZUFnZUJMTnU5V1VYSGduZzllM3FaYXRGeno1Xy05a2ZUX1hWb25IS0dFTENnTUFIS0lvQWNsb2hOR0wzLUYzRm9HaGkzQkJYTVo0VVp0dV9taG9UMHJoOEZSdmZtU0lKWV96MnlVQXVFVXItNVlOSkszei11c0xyZk9VelB5NkJQcUo4aG8xWW9Ca3FENWh5ck1xbkpDTXNiVG95bW02RHZiS1kta2NkMGs4YnVmamVlcy1tYlJ1RWJXNFZENjVfeDRGdTVfQWpNWGNOUVZBZmx4TzI4dVE5YkNXdFdBaXMtQXZ3VWdmT2JDcEk3bmxqUUIxVVZIcnFYNHFOMG0xa2xmX0tUSGNCX3UtbEZyUUVrZ0FKTWc1eGU1RVJjeVFPU0FUSmJzN0p4WGI4eTNRQ01NX3hzcHpBRWNzU3c2N1VDMHAwR1hOZ0EwWTdpUFdyd1RpdVdaSEU0a09GMjdESGdfa2JTYU12VmZIaGlUX00xQlFzUWpfRi1ETndQcFVoUVFwUEFUeUUwb2V3UHBzUmtwWXVDdnJ5YW5zNjdVa1lwYmFPX2pyVlk0cDA4M0h4b2N3VUl2WHJWaFd0ZVdLamNSSlktOGF6QTNPS0RRX09JcERUZVdGSUlZOEtjZmEwaVJORGdHc0VfbUhadFJhcXEyVmxBZUt3WTVmVGFiV1FQSFJpR193RXg2OWpEUFRScll4bjBlalZ1VkN1eHJyRnJMRWRPWk5FZEN4WG5GX3BxSVh5UUxJOUY5OGQ5UGxxQ3kyelU3SE5nVmUyc0x3TGV4U05QQ2ZHUnc1RDFlMEh5cE9kRXM5TWU3aHB0X1dWRnUyWlJpWEpGbC16eUtqWTd5UTQzZzJlcTAzVXd1RHlPcS03bXpPZEc2NVhFSmxrdWF0MlJJZWowM25vb1k4RldHc24xeHNmQjhUSlZZV1pwQnROZ2UyWF9UMXZ3bkZMVUtwYkpRdzJjOEVUdU5SbU9sTnk2eFZia0E2QkxQQ1ZrY3U2ZDJyZ1Z3bXAzUDZMdXFLemhzalFSdjZYTnVfY1lyNFpvMGg4OE12OXZtdHRUTF9BX1ozeGp3SFY0ZE1CV2VGV2V3SnpzZW52ZE1MdDVveTlGdVlGMHRJUGhrTE82TjRjVTgyZ1BRUFZaTmF4dHloSTU2SXh4ZURZTkk5YW9nVmp5bTdLckxpVzVNWGpKUUZKdDlTTnVRRkpIM1pKNzE5U1ZsaVlQUGcyT29CWUhYTGZIcDFpMjl4Q1JFakdSMU1RdHdUZHBjNFVKOHNURUg5bE5ZTUd5SHUxMG1Kc3ZEalk2RWVBNkxraEtCdTRCenBIeVJoWWt2ZVhsSVBlRWVmM0dhNEowYTFNTjk3SkktZXQ0RmtfeENPZG82QWpkdzZpMFJ3d2xXWVlaX0QydV9RNm1DOENnRU55elJXSENQYzFwdXNqbGQ1SnRBaGFvd1BEZkFIZU9OdmNSaTNTMVQwTmJlQWNGVGE5NnRpc2xpaEF0X2ZvT1A2cHE1M2dKczZpZFhJM1VaQmdCVlpNT2RHMHFqVzR0a2dWM253c0xtRkgtVVZRYUxhd1F5bnF4V0daTlFGTDRJUXZOazhjRDU1cDdOOXdZZFI5Z09IM0NDa1BscTZZVk9DOC1zR0RFZHU1TUxWZm1oU2RONWZMbjJnQ1NwbnBGN1EteXY1SE83ejByQVZTNW93Y1l4LXBDS2c4V2JsZjl0bWNybTRyNjFSTTAyUm92ZERCWHZEUE1EZWlqOFVVbllzSlZ5cDV5WndIaW4xZkF5MUVTQlk2UmlubmFwVkdrVTVYS0xwczFuNmZTRmpxd1hXb1FWTjZvY2lLZFFrVDNkbVJqRlNaMWRSbFUwRkFwX3JRU2FWbjQzQ0Z3SHJ6MzRIWFFjS0RLelpVSTJhUHNxUy1iMllrSWJ0bnliUGhUa2tPU1RkY3RkNUNTTGV3Q3kzMEVlcVp5WUF5ZVNQbkZ6bnFuXzUzV2swaDRBc1BKdWluVDg2emdFaDE0LVNWVHpBOUw3TnZOZ3hwX2VpcTJicHNURVlqWTVyTGNKMndqVjFUS3lJSnlSY2M2UDhuN3RmQ2NGM3FvREN4amo4RVhMbFpGdnl4YTlRVFBBTW9GcWdYaEVkM3ZGVG55U01zNklYd3kwaGVhaFZkV2M3T2kyN1ppamhLNUhmVGR2ajBNLUhGLVZxWFFEQjUzTTJEMDVSNDJWc2syaWlIMzdFQVVYeE8wbl9ncGNwWlNCU0JUcjdYai1iRnE5Y1JTWUJHbzZkS1RfTXpmX2RDbHFqdzE1VkhsVG0xX0VHeEpRV2RzY0hobUY2QUdDc2NUeGN3d2pPdUM2N2RhWnE3aUdBYXFCanJITlNldWI3YVNLUTRVRmJHaUo5QzMtQ2FGVmNwcGZYTlIxS3NBQ1FHY1pZWnpXR0lXVVJJT0g2VURBbkQxdE5OMEtnbWdDNDI1akpQV2RJbkgtYmNja29QczJRNHBlS0x5OG50VVBpTlhHUlc5RFJKOHZ1ZG5fSmdFLURhN0ktUWRiYmxVTExQeW1MQVdhMkJoTjhLWlVjZ21pNmkyZ2twdGJMRGR2N3dGWjB6Z2d5Z0lLbzNpenduZVlYcEpnVmxodEJVa2QyQ3I3WGVzOTdVRWVKbElVR2JYNUpHSTJvZmZmSnIwYVh3VWJDVTJHZjhocGd3ZFRsUlh1dmYwZjV1ek0zWnY4QjBSOWt2RG5LMEFHS1VSUXY1aUZKUXdJYzFNaFBCLVBwLS1Za1FITUg5RnNMdFRISlBzVkR6RF9fUDB5Y1pqQ1U2Wm1idDJVY1BONGdDZmtoRnpSX0c2RHIzRUVqOUduNlhmZ0lHNWVUdmhLZjhpd2l5Z0ZlbkhSQkxid190RVZpSnBUTkNURVF2ZExCeEl3ek9XQW5GQWdrUm52ckFwbkU2ODg1M1cwM0NUWlBzR3ZrU3lSZEx1dHJUdTVDdVI5ZmpZNjlfUWRPYllYa290NGZmb1pTSVZYajJXeUlNM1B6cmQ0RGliMmQ3bzJRNFlaTEUxZXlfQVcxd1RFVk5ja1p1ejF4anh0WUdSanU1RmVPdno3Ti1MdnZ4bEtxT0lZcXRiQUF6eVA0R1pXNV9OejFXbUxGdmRpVzNDQmFxMk5JZ0I2X1k2c01xTDQ0NHRzbTktRWN5VlV0TFZWQVhPeHlQZUhCbVFEXzhWSFBCYjBzaE0xclBsNWdiZG1UdlFoWnlmYl93WHB4V3hIVkdabEN2SlFBMnpodWk3cWJ2cFRjTEw1b3JCZC1iVFZYa2R1SGx1WUh3V2Rid0NoWHZnQURqMnZmT3VzODJqWldxQkVleVNGQW5qTjZnRXNmU2ctelRfZVJIYkxobkQtRFAtNFVWZGhOazB3UWhDMlRxYmRUSC13bzY1UGhNb1BZMEl3OWotNV9sMlA4LWVrdlR4eElHWGVkZERPUFNVTHQ5WHB1TkZHNkF2REFOQlpTeFhXOFVTWDRxcGE0QkJtamlTREh6aVJJV2RzNDk2d3hKOUtSYzYtNG9tX1lxR1BETlFGTGotUGhIVlFkUFVjZTBXeXFBcm5ONVZEaDZfcEpFT2RxYWdlelZqM0pVek9lR1drM0hnRzQxUW1ReElfOEI3S2pudjZYNzlMaldXNlJqZlB2NF90YjNzZVRuVDItLXl0aTFKWkNRbXBFY0xYRUQ2WXEyWEN4NmRPcnljRnlwazZLT0VBNDBTZXNadUZtbmpHSGdjSm9ERnJjaUtIMFZHblVxV194SmdCMDdNRXROUHJiNGNsY2huMS1PQkpFblU1THROSkU1M2RtUVlpemxNOTRPaTZBWXg4WVJ0VWlXNmI4b3JzcF84Y0puU0hzUzcwRGZyS201QlZnNlN2OWUzdV9SaDB1aEE5YWtTcDB1Q3Q3RXlTMTBMOUhhMUJvaUFwS0JjLU11cUZwbnlJRHZqSmFBbEFlN29UMjR1MlllODQ2NkxKYW1XY3hoTm94MFZyT3dNTU1SUS1ZSG9QS2VVVWhIRE9KUE53QTZiUjF1WEZTLUV0UENISDdTUmI0OVM5b3JmQkhsYThOVGc3d1JabENncnhvbzZyTHdCWlhjdUU0cEVIbXFyM2VRUWR2OHh2MC04Tm5wS1ZEYmRsVU9EejVYbXU5N0diQVFYRHFYRXlFVVBZNU5PZk1oS0pMY3QtTlRMcVVHb1ZrSWpXT1VFUVlIVFFJdWcyQThrVmZfUDhfVkxjTUN4czFvYWUtb2RnZktuaC0tamgyalV4QzBMQmNtTGFOeFFNd3otOUtoUXN1UTEtLU5RYjRzVklydHNQU3UzRTF1b29hcWpDcWptQXlyRUhzYmJLcktmeFVuS3FkaU9fOUp1bnJYcFk2SmpWQWRQMzhCQVpIRzg2SmxyVlotSFhrc3hWcHlwUFItYW9QUVBFVFl2U1EzU2lGRHdjWTRET29aWWFhLUZTdV9Ycnk0QTY3ZUVZa2pfQ1NRYXUxTk8xR0FwdnJOV05IWm93U3R2TFRUVWJyRnBITk14OUZNR0dfUnVFVXdsYkVXeElkaWM3YW9hUDlGUzNMMVdQR0VNSTUxMmZBWDJaN0xmUG9NRjVvZGZJUFROU0taQ2c1N1NqaV9Xa1hwbHVQYnNraXdsSjJVakVVbWwya2NDaHRhVUFBTUEwMzl0cHg2SV9BeE5rem04ZHZPN3l0ZnFSbE1VbHY5N1BqXzJobGRmY2NnblN1RnBrc1djZmlIbU1mbWU0eFhxcEJGODVWaF9MT0t0dXBWV3p2Q1pHU0wySmlDeGpvV01DdWZfbEVfZGg3RmUwQnpucFBvd3J4ekExU3lYbVhNdzQ1Tmw0OFNSX1JyZ3NEeDZOd25wVWNXSGxzNnNoWGNJQVdQdlJCbGhHV20tX0hrUDhpVE5va3JYZUxYSDhwdGRnZ2RRY0xsRjVwempxZDdla2J5eDNqalo2cEhKbzAtSkxyVUVkdjViSEdfVFA4U3Y5RTZPTkN4U0ZINEJGeDkzbUNScVNtNDlva0dRLU8xak1zY1k0SGNRMExEay14aFB5N3F6eDhNV3VyNFZpc3M3bmM5bkdpUjRZQ0JXTXVwNUJtd0RUVHh3SUJXN01laDFLOXQ1dkxZUnJnVWd2VTNOTEwxd0R4S2YtVEJQbDZ3N3NQSHpvdE04UWp3RzNDNzBaYWNIcjBPQ0J1UFAyNGxJbW9tNzNRdmJTejdiNzBIdnZLbWFkOGNhQUwwQlVTSkduSHBnNGhPbFNHMjZQM3NuNzlMUFVaZkZ2SmthTDdkQ2hhRXdTWGU2MkduVjhmMC15bnZha09RVUN2NHg5MjFhNTlJLVhsc1hsQWROelpuM0hScTZ0OG5hRzEwcFNLc1hSVkNoR001amk3OFJ0ZGY3TjhQMktrVTBWemxrbl8wU1UySERRSl9tRlJmSE9sYUNyT1U3LTNob3kzazdUb0VJQjItTVpFTTBwUHpzWElleGlTUlNnZ0UtVXEzakJ0bEpHYzhHZnNOLU9mLUhXZXFBOS0ydDFKeGZ1TENTNmJvZGJ2SDJLVkFJYS1yN2pFZk9hRWZ2VDhwVUk2RGkwX3otcGVZYkJlMTFKNG9OVEJkeHQyLVZXNm44NXF2U3hGYzQ2bmxoMFN1UnNSNGc2VnMxTy01UldQVXlZQ1dkSzNiMnAzTTBzeS1ZRE5neERmdm9QZ3JmcmVXVk9fWXJPV2ZURHJaRS0zV2pDMFlIOVFvWDlReUZjS2lmLWdiOXdRTFRWZmJPS1ZZQUlpSDNIT29kZmVBaHlxMWJwTml2OWIzVnlucjRQVVpPZWxWYmtzaHJIalktdlB0UXpyR3NGQ0xSTFR4MXY4bVpOajNQT0xHdE1QeGNkVEV2MkIzNmdRdDBEeDhiNFB6TGNHdnowTXJjclFLT2NQSXBLNUFKamh4S1pXX2luWHRiS2FKU0xZcUUtWHNlczdoSWpoLUhKUkVtczJ3eTZ3TzR5bGpORFdiYl9tSmpwNjY4YUNpWG9NSUczYU1ucGRBeGw1VDNTc25HSjRtbDJvNF9mNm5ULWF2R2x3eEdsLXpPM2JNOFRpMnkxcnVfXzB4LUdXdDRBc28wOVBSblRSdjFtX1pTdElFYXdhenUyYkR0TTJETHpPcnpKaDhYOEJ3c2w0VTRyTnJLVG16ak5WWTZENkhCOFg5dDNoVXVGQVpoaFFpeVVnc0VxRm5tazBvMHA5R0Y5c0dHbHVTWUNfdzVmU0pJdnZkMHFHTjhPVzRTM29sNGRaTExEZHpfRTMwY3NwVjgtbndJTFNGTFJ1Yks5VGhaZ2RyNmpoRmJCUlZVai1HYnNvcjNoWkV3VGliVnMybm4xOFhiZ3Z3TTdBQnU4Z0l3Tk5DR2s2NF94V3RFOWVrNnJsX256cGhvQkVkaHdjTmVEam5CLXp5SWk1MkI0czd4Z1NKOWFVbThVYi1JWGVlbjZJMm9iaGFGdjFKbzVJRlJwMWVwMGJYME9yRy1nQ19OZnZZTm5obnZmTXc0YUZqdndwQWg4Snh5WUdaTzBMY1VNOGR4MXFNcjVNWVFqUklQeXdPZ2NlNFJXSTQ4UTJIOGp1ckdVRjk0eVBNTC1MSVNKeGFZaXZxZkRIWkNQbXJ3b1piWDNhc2N4YWhSS281TW9IdVBGWE93UHlTT0dHSnppVmlxOWlobTh2R0hWUlFNX2o1V3dOclNJTlFiaWJQRjV3VHlaN3RHcXlzcGN0RjdZT0djWnRUbWIycnhNMXpTOXluNjE0NGsxUVVSSmtHLXAxN0xlckxfcE5tVFA2b2lHWnE0LVlZVTJRcEJuSXhXUHBWcndZS2loMUxBSXdVZG5xTVRsb0xCbEs1cC1UZU9vaEFlQnJPQUI2N2xpbTg1VURIekx0WGZKUUV3M25DMXBSUFVGUEVYWTlLZlYzRklTMHlkTWVfazVIS24wZ0tBel9QVTlRcEFRbEYzdDJZcUdxQ2x1X1o3UEFzcENMeEFtOEZHaVlMVEtKZ3g1ZjMwYUxJM2JqTUtKSlVVTTBubWZyVHhYdkVpZm1xeVJ1U0hBdkdtZ1hhRzkyU044NFNQUnlXYk9nVXIzN0g3NXh0ZUhGQUZ5TWtZbndsbTB6WUFiOUhLUURmNzJHUzdwdHZtUTd5WGVFdERlZVJPSjlQXzZneEpNLTctYW5qakJyUmtfal9SMjBjRi1lVVRHVXota05vZVdJTXNmejBPZkxKTzVoVjZkb3BmWFBRcHphZXhWZHE0TE5tdFc2MGFncWFFOGNYSXJISUttbXB1SlVUa3g0TjMxcXNNWUhFVFRWSHVPeTZCS2JTaEVXaEEtTXFKemF1MXpPd3NSQWdNTmdiTGg2RHJTV0NIM3pUa3lnek4tLVA0V29WbGtjX0lGQnBpaXJMX0ZZamxmNFBYdzhqR3B3b0JlSUdmYkFHbnVxNWhOYVVVZzQ1ZXBOV3Vjb2JUUnMtTy1sMUkwQlg2THF3U1dTUTMtQjBURVlfR1R5cGlDWHhLZ1pXTDJJc2VSRzQ4T1hoYnA1V241UU5aY0ZsWVJNZXliRnI0cnRzVldMekdsa1VZWThocFBtSnZoVFpnUDZEQTFYa2dCM0hRdTZ6Qm9nMGJ6MW9YM184VFNhYkFYRm51dWtwZTl2V3d6ZkN2aFdKNXJJT2ZCTjc4LWVqSTdONEFtWmZYOUZJUUtXN2ZyUU1VX0xIVjFtdUhxay1ZSzNjOV8yNDk5bmh6TjhsUjVubTNKQXJoWGVCVVJjWUc0WFM4T1RfeGNGZmdsN2t4R2tVVTJ1UXltWXhhckJ6N09yQnpVSHdvNmhiWmZtSW5IdnZ5dnpxU0dKeWJVazlua0dGQlRWUmhrei1aWWdNX0ExUjBTUVB6cDVPNC1Pd0dONkZSdGh4cm9EbTd3YkU4a21lcmZqWVpieUlHZWZLSE5RUmJzMnR3N0pERUk3Rk5UMVFaVTlGV0hEaWx5RlRpSnVCeFB3YTg4NllDMU5pWFZxQW1wbnZGV1loaXUtT0Jub2hfVlBTS3hiNHBrSVF4V1h6SWJpRzNJLWcxcjhSZEdqdDdkUVpySjMxc0NfVUxQMVZUS2Q0Q01rYmRrdmxlTUtIMWcybExLYW1EYkVVVndhQnFtaFgyN3lUYzhGZlRlYTJwMTNmRGJEZjc3SGV5MGJOUlh0QURSbm13TWM2OWF0WHdST3Y4cERRQl94WjVhS3ZTa1BXR3FvVDZlcExqNjZlR09BRG9mMS02UTgzVy01OEdPUXdVdXQ1WkNPM29nd1c1ZHZic0xMOFNSSzBmd1lhWHF1RVBLcEotUl84ZVl4d2VZTi16WWhkUGNjZGliSVI3czZjWmFTSEZncE1lUWhhNVM3bnMwQ2g5b3hKR1BGbUxod0c0dldCa09TbFVyekRIMHFYTFBfNnpsOURHU0g4U3ZDdEptMnd1dU1kbVlmVjRTenNhZWp5STJYZWdVUk8yb0xLQV9SdUd0MFVuV1c2RDlJZlNNbE9jaGoyRlp4Q0FoRVRZbkVrVTN3WGZuUDdwNEtBMWRVQ1BUcDBmRmZPQ2plNndlaXlZZHZLYl9qNm5qWnBnUXVJZm5iTFpiM08zX3VjbTVRUkF1NW9mVmpKT3gzZUMxSnNXajJEZFdVaVZwS0hKSW0wVGhLbU5ubXJBTi05X2pzV3dkcmJ6aVZtYWFBOW95MHMzT192OHk4WWlwaUg1ckg4aFhxQlRaTFhwaDB1QzE2bWRBbEhxTS1heDFBTVIzekxxQUtsUVdYMU40d0pvVEVFdkxQSFdyM0R5MDVfSVdzWVlnQjhlVms3aDA0YVZZSWt5QTBsUThwcHRrYkJFMUkwRXNvbXU4ai1Qc1ZBVnQ0UWVUMmY1Vnhhb3dfOS1zRHVwbzYzS01BaEthUnAyVTZpdlhjdXVreUdpU2h2d2VfM3FiMmNxTjZOSk9lbTVkNXdNMjdZSUJRTlpPR21HSGNsT2N1dUxNWmFyZFJ2Nm5sbnRmMVhGblp4cEVPTUN1SG1ud2tib09XZTVLTzFhLWF6R09uS3pBMFNWY1VmdGpGdjJqX2M3VWp1Mzh6RHZoWTl1MmZaMUpKNVNYbEFOQkdWMTVkbU5DVjJHRnpzMUZ1ckFMZVNFQWltcFhXdkc2NHlpQTVxY0ZLSTFfUGptb1lpR2ZNM0Y3Y3o2bjVuaElfZm1yQmxuMUpkcDUwd2M4aTJ6aDVoZ2lIcW93UkNIUHY1M182eWFmaXJtUXQ4Z0t3eTZ0cWcyVHMwbldqMUw3Y05NOUUwM0Vpd3ZFem9UY3VxZlp2ck42azZpX0ozVHItSUEzT2lJX1dFR3RRS1ZjaHdicTQwc2E4a2pmc3VkclVWQnNzZ2hfZzk2NHRPWnZGWW5weE1vS3ROR0piNUlYc0ZWRk12ZjJaS3JPM2N6elhpUmtXWkZqQ1BvQk5CTmZTV1ZScVRJdjhZWnpWbmRodG45T1I2clQxU0ZLbzBpVWdGcm5tODh5THBCWno1bXYydl9JV0xqWTVXRjh0S05sNDd0cTZvT2Z3c1haRE55ZllfQTNOY2p6VmlUMkVQc1N4ZjlSVnZWTjVob3ZxbTFoNXRDOUx4WWF0WWhFUUtHYXZFV0NOWFpSUHFfcWxMd1daVVUzX0tYTl96TG9aOS1UUnlLekRyUkZWSnI0U2ozVEVMNzFLSjFhVkFvUjZTVEVYenFFMExTUE8wY1VlMEhQbWM0Q2hCcm82QnJwblNvM3dNcDFLMGFzaTM4clZDai05SzVpbFpQNXlWd3Q2VExxVkZXT0ROR1ktWktDRjNwaEotdWlQUVBfZExqNy1wWkRLbWI5TllsMm5pZ2I3TG9GQmpFRHMwOVdkRnh3SjVyRmktMnhrMFhWdlJVZVlndTBORFFYUXhCaTZPcjJjUlpGRV80bjVvUnRFYTNOSVFWZzNQMzRiVU1mZEhFVE5OZGduTnZ0MnVoZVBkVnRHaUhpNGNzTWN2Tm54QmN1aExVakg0SkpJNXphRDlkY3ozTEI3UWRZbmd6N2NOVm0tTXVIUnpMUmZEOWhVbGEtZFFjUVJ1ZEdtYnd1eTZMeWNoNUFJM196WVhnN0VoekFCN09oeXJJSEJYbFNZVXI4QzRxMUhQR3pXV0lWYXB0bnlmTGZpcjlsNnpGZXdDQ1lLek1GZnlDWEJaOWsyVEhHUTFWaDhxR1B1bmNzcXN6LWxCdEhUZVVuTk04UlRlU25XQkYxU081ZnhoWHZDbTFORW53ZUY3YV9vX0ZPdmp4VldVR1ZJNmpaU1VvU2dweGxmLXBraDRjWGhFcHY4dFY5czdVYkk2cUVZQjItczJKQjJQb0dvWFJSYXQzaFItU084QVhfSnJINnlpczZnRFNiTlR1RUN5RHBiWDFYM0lhVHFMckNpOVpJOUw5QnpxRWJmXzU3M0dUdm5fYTBLSWU5blR0NkdMSm9yYUMyTWJqV2gzb05uWnFrWm44ZmVSRVVWZjlEV3ZtZlVUcnVEN2ZFZmxXRzloMzhibFg0eEJadmZDcDF5UnFNeXVyaE1aVXJzdEZ1ZlFBeDBIWXJDd0l1ZDZiMnd5ZnNOT2NGMHlUdS0zRzBXeW1mR3E0ZTIzZHUzUEp2Y3c1SWVJWkdsYTVON0dHOWx0a3Q4Rk80WjF6SjN4ckFnS3JSeGx3SExXM2xIUXdDLTF0NV9BaEdSMUNlUHZNSlZ6cVBVenVGWmVuS3ZTb1FDRXNrbk1XS1dlVzc2VzFzWXhHd2NNLXRNTWxhemh3SldsWnh5bXdfSlVPSTBSM2FHaGVnMWllcUR6dXVYcVdhaW5hTEQ4bllnTFl2RS1oOVJ0U0FkYVlwcVBmWHN2UE9zSUNxd0pNNm1CSTZ4UnJjQ051WXpacWRNVUJxT1Bmc0lVZ2tKT1FTdzcwejBwQ2V6cGJld1BLRDEzTXZkZC1jbjBseThsMnl4WGgxaHVaRnh0RmZWdUtIZjQ0TldLMGVzV1A0U0F1eU1xcUlwdHo3eHlyQ1Jub0czaC1FSjFKN0tIR2lDUE5NaWpHZEg4Q3lCWGprbFp2cWppT1pMaTZDVURRaC0xYnNBY0JIUWtWLWxOVk83eGJCRmtjaVJzS2w0WUFvb28xNmxJWHdRa3BFeTYtenV4amZTeHZYWjg0RzNORXh6M2FaUm81Sk5KLWR3TzJhbXprZnYxeVUwVF8tdG5RU2NaTTZOSzBPa0hLWUl4bEc0UEs5ZTJLbmRjVkZoTU54Y2lqNmJFOGJTbDFzX2g5TnVDSl9OWDVXVXNJM254RmFjelFnNEZuN3dtSFBHam80eDBuTHJmZXJBZ0FaVHlnMmFYdmxlRUtGVVktbVF0VTFyLVMtcXhwY1hkbkZ4LUZ4VDFKTG41Sl8xbjg2VFBMVWt2QnFmNHdPdEZnOFZNTzNzclhUUXNORmZuTHpXVUZXVUI2ejBPNmFqTzBRVkFrOHN5Y2pFOGtkVnhCcGZTanVZeHJrblZ0Q2tYSnRTX2lYaGxxckx0RkJKR1RwTXNMUnRLQ1A2MFNMV2RTcEQ4UGd6a2h5andJMjMxUmZxTmM1cDZGRlNLVHpyQlQ5bEw3T0NodTJMZ1ZYSEducHJ5MHp5RzdIYlRXeXdqdGtEVFNxVlpfNWhHUWUtY0RqQm1Ta3l0NExHOExpZG05YnpHbkgwa0xOb0ZLT0pJNGhJM0ZHYlBLVEdRakdvX2RHdXA2eFctSUpMVzV0Q0hxVGdSZll4X3lKaVlHODRlNWt6b1pwYmNZdkc2S3Ayenl4VEoyZlJzeVYxVkIxOG9QM3BwM3h1dWR1U0JhdmN6UzVGOEduSVFNZDI0ZVVoLXNWaVVBVlR1MWE4dU90dGxEeEFRRklTM0JmZkdEX3p0WFF4NXRIYk1nN2ZYd0FTdkw3aFVzOHpjbVBvaDA3UktRVnA0NktjTndSRmNlOWJrRDJkNTZEZENXWG9fQWkwTTkxZEFZdlVLZTE1dXBzS2RwcTlLUmJiNEl2ejd3OHpRUGFkM2xIcTBtN2I2OW5ucUxidG0wQ0cteU5DWVJhT1JaRDdKczV0UnVWX2FkRnNRU19nZ1lYbDY4NDJad3ZuaHgySm5mLWJXZUdHQ3A3Z1YwTVF0cDZGS2NOV3RSbXVUSEVqNmZHVUhweHRvOElJM0ZqUHctTkprQXVhcmswcTNGbGpFdlZlbmdyck1Jcl9XVVBxRmd0OG1temltZC1xcDFwX0RhWU53cHh3bGprMmxCQlJXbW1YTmtQeEpfMFl2TEwwQmVRLWtCUHBHU0RjN3dWUjd4ZXNQN3ZJWWN1QXZjc2R6cm1JWTNBS3dCVGxhVmhRWDNiOW1FZlN5d2NhVFJvcHdMTWRYX2RCVkVBb241cG9kSXVrUmhVdVN6U1I5TjFqMy1KanpRTGRUMm43THJidkliekM4MDlQM1BsUWdwb3NUYndMZ2dJbUljY1ktVW05M0JKZE85b0lzSDZNTlY2S2ExbmRoZW5mbWZhTUxzRlRDVnNPQmQtalBPYUxORmxXcFowcGprNy0wbGduZGVMS2dEN1F3aGdiSHkwLTZhdmw5Tm9JRjI5SjVxQ2s2UXVEQU1xZ1lUYjk4NG5aSDl6bElDcTd4OVE5dVlianlLN0tUY2FiX0g4Z1hoSUE2c3dwTDUzNk9EUTFMQnRlSTBCaXNpU25oSmszYjdTVmVIYXVpYlFsSWtvUlZfSkV5czVZZ1FQUjdKYVB0WHZVYVZ3UWtraG9kVnd0bnNmUGpaWGFKSDdWUmxNaXVKb1lmWkFMYjdrZXFnWVRnNWc2WWNwMHRhMUhBT0NPQk52RHQzTW5qOVR0SHBBSmNiUV9BUmJwcUxWU3M5Q0VrVms0VXY2R2FDaWV4TENwbndadGN1QXB0dXU5eXEwNmo3a05MOVRhUU1MSGxXOGdiLVg2Smp4cVU1VkNyZGlDYzI4ekpPOFdtUVA3bm12NG5kM18yLWNtbTc4SDRLWERvUU0wMU0zb3JMU2VPSUdpbDh3YjJJOHBNYnIyMjlyUEpvUDBmNWdnTVlfUVFDWjBydlRoRDlOUFVNbUhtWTNMcFdyWHpSMGFrUU1uRnZNaDRfdEFibW9QNUNiX0xUUVIzN3kwZG9lbUc2RFRfVHhUZEJqNnVnLWx6YUkxR213emdHS2kzUjJvSnprMjZZUmZWZzVDd2JXM05BM1c4anA3a1NnQnFneENnRTJFZmZRQlJIWm9KU19YQlN1TFFhV3M5QVlTQ1UxeHBPeEpueVRuYUREdzR2QmtWMzhjNGU2dkRqd18wLU1KUmRJam1zRy1LbTBLX2F6RVpJc2JrY1ZDcDB1Y3EtRy1pQ0hTcVhNUldscDJQd3pSTmxTN251eVNRQUhFdG1NZUgzeDQ5d1VBbDZyY1hjYUpPRkp2ZERYcGpyMm0wLWczRURWOFlsYm81R3Z3YVlONnc5VTM0ZFBZT2doaC1nNnJaOTdnbkMxUl9oeVg1bENPbWtNTzFRTVc1c0dyNlozMGVobWc2N0Vzd1pzSElXOTVQMGtIVEpYa0xPOGVNdTZpZ0MzcHljXzRLZHIzTzZlTXJjN2o3bnRjMzNLRzdKWDBCYTNoTngzMElBZlhrWklKcEwzSkdxbk9rczg2UWVHY0tPNUFRZHpMY0dsNWRITG1zWFBQREtOengwNHQyTHRoeHQyZjR5cUNyQWcyd1djaWotNE03SzlMWnlwNnFITVNGWEVuM1p4NjJiRTVQWEFfb1VzTWozWlVUZkI2ejc1NGpjV1BlT1BPUUxTNDl5UG9jNVFBNFJWYlBJUVhCdk85RUp2MndYdkE2YktTU2k4bHhKS3FzQU5ibVRnQWVJSno4TDBhM3ZSMEYtLVRJZGI0X0h1T1IyUFdtM0pTMnlFTWl3UU9jQ3JUVUVxeEIwa29VOExCaW5GajBob05NS0w2SlJiTzloajR3ZnJGRHBfcmFHeDlETm5YdmFlXzZlc2Z6QXBSTWQ5Z3NCNVZVTk5qNWg4RzdlS2JqY2oxYmFKTWFNcFFPZFdkLUVHcEd2MzJfaFpGS3RCb2lzVTZvWWZ1Z1Zyenh1bXQtUlNva29zSVcyWkExcGlBVlB3eTdfLXhPWDRhVVlMTWZULTNXMU9NQ2c0QzYzYld6RXYxRmI2Rnh4MWdLZnJac2tQTXlfcmNIdDhNcTF2RUxIQVhYQ3BsaTBRWVBqM0RfUFM0UEtCV29ycHAyR21sSWF5UnVtMXVROFMxSUoxb21Ba0h3SW85QnVBc0wwM1BCUjFONk9MSDdVZG9ab1NYSXctamt5dnQ1TXRJbzB0SWVobWFvTDhsX1ZrMkxXRENPcGFoNGcxS21lbWlXa2dTdXdOWXdRR1dxMVdqajRVX1pFbzRXakxFTVhfN2VUX0tPLXAtUEdBMWE3aVFBSmZGblVtZWRYYzh2a1hSRG91d0tNVHJKTWEwU21oN3ZJbTFPZlFRQlpSMEgzeElNb1RDTUpzVndkOW9IQWg0d3hldjk1eGM0Zl9GRm9HdFhWUGkzOUpDS1F4d1hGaHBvS3ZheHFXb3lKdmJCZUkwPQ==)
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - |
        # fetch codemagic helper scripts
        rm -rf ~/codemagic-build-scripts
        git clone https://github.com/NevercodeHQ/codemagic-build-scripts.git ~/codemagic-build-scripts/ --depth 1
      - |
        # set up debug keystore
        rm -f ~/.android/debug.keystore
        keytool -genkeypair \
          -alias androiddebugkey \
          -keypass android \
          -keystore ~/.android/debug.keystore \
          -storepass android \
          -dname 'CN=Android Debug,O=Android,C=US' \
          -keyalg 'RSA' \
          -keysize 2048 \
          -validity 10000
      - |
        # set up local properties
        echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
      - flutter packages pub get
      - flutter build appbundle --release -flavor production -t main_prod.dart
      - |
        # generate universal apk signed with debug key
        '~/codemagic-build-scripts/android/generate-universal-apks' \
          --ks ~/.android/debug.keystore \
          --ks-pass android \
          --ks-key-alias androiddebugkey \
          --key-pass android \
          --pattern 'build/**/outputs/**/*.aab'
      - find . -name "Podfile" -execdir pod install \;
      - keychain initialize
      - |
        # set up provisioning profiles
        PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
        mkdir -p "$PROFILES_HOME"
        PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
        echo ${FCI_PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
        echo "Saved provisioning profile $PROFILE_PATH"
      - |
        # set up signing certificate
        echo $FCI_CERTIFICATE | base64 --decode > /tmp/certificate.p12
        keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $FCI_CERTIFICATE_PASSWORD
      - cd . && flutter build ios --release -t lib/main_prod.dart --build-number=$BUILD_NUMBER
        --flavor=production --no-codesign
      - xcode-project use-profiles
      - cd . && xcode-project build-ipa --workspace "ios/Runner.xcworkspace" --scheme
        "Runner"
    artifacts:
      - build/**/outputs/**/*.apk
      - build/**/outputs/**/*.aab
      - build/**/outputs/**/mapping.txt
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      email:
        recipients:
          - milind.mevada@solutelabs.com
  production-store:
    name: Production - Store Distribution
      environment:
        vars:
          FCI_FLUTTER_SCHEME: production
          FCI_KEYSTORE_PATH: /tmp/keystore.keystore
          FCI_KEYSTORE: Encrypted(Z0FBQUFBQmdZQjZwZkxFT2s3Y3NTN0lUME8xdUpUc1pMS2V1Rm45bUlxX3ZmNTZlTlN5b0RJZXpiUnJoSEp3SDZDSUk2dEREbDhMZ2ZYTWxEUllMY2VfMm5HU3JtMEtJcHVfQi1Vc0xVS3NIUUFhQXF3LUVnYWVSVDdmWEJ5MjNMNUs0VzNmUVJ2UlJ4YUxzYzY0VDJMOWE1bEh4TG5zUDdMQTd1WEtGWmp5Mk5RckdyODVNdFJNTkxORHY4TkNqcVNlV1AxWUc1Mmx0N2hnSDIyUGJKYVg4aGFIR25taDROOUdGX2RYVVM1Uy1uVXFlZnZIT3N2YUpJTzNqNzhRRFZYRUlxYkdKb2wzSUgtWEg3ajBFd1dZSW16YnVkQXN2Z2xSNFYzcXd4aTJUdmdQV0VJTFJxM0lVMGRIS0pfRFlzR1E3NEpGQUtSTG9yWEhic1V6WlNTVXl5QTlCekx1eThva21pcUtqTldNaTA0QVFSV1pfc0FFbkRKclFsdTd0a0kyN2k4QXhmcjVsaVNpYk9aZHItdGFDbzR0a1hKblY5bk9YYUNnM2ZqMUlUakpVN1l1bFhJWDYxVnNwVm5kekdqOWQzN1piWWJLbzBXemFWOEZQVHNUcUZUc0lXVFV2UjFZajZFWi1MdE04OFAwTGhJVTE2aUU0SU5jUjRMTkgxRi1kb3RnRkgzZWVSRFZUYnBaUzFCYVpPaEFWbDhqblo5bElUYktwbEE3MkR2dXlTd3hxMkVZZEJyLS03NWUyY3l4cDBHZm1NVG1vTzZIaTN3SEt6UTYzZ3VHVUtKd3RFNVEwdExpT01NNGtCaEJMaVZ3RVRSbmZoc194cHdaVWZIVG5KMjNHbDFTb1l5V0dNUDVBbkFXMjJnRS1oU0lrVy11eGYwVGxvVUxCUUtlLTQ2X3lGT1AtOEJPSmZuRXc5QVZoekRxandIdzlMcFZ3Wl9uQUtjN2pweW5Ld3U0ZENoVm1idlM2OGJHWW5VZ3c5clVhMUI1aXRXRzNWSEstRkxPeG9leUNTcWQ4ZU1PMmFaLVA3MTF3cXRWRVROVC1wMW4wRjJSM0VsMElFWEJrc3VtSXY5SjBOR0hEeDMyeEdxX1pqRHhSSUQxcTQxeG84RjhpWkZYMWk0Z3RXeldrQXpBMnFPRUMxQ3IzU0w1VTlqcmxjV0Q0c1VDVTlzRW9NdHVyeVoyeDgxZmRseEtmbTVpMWgwMVZrUlBCN2RNaHhjZVc0ajU1Z3JaVTZqVUpHRjdRS19nMVVqY1l6WHZxS2FXSXItOTZITTllY0ZhZDF4a1NlMVcyUHJxdFZkUFdFUUdJUnF2UlE3cnUtdmp2cDdIX19fNkN2S0lndHlldkZTZXFLNjNXOTBsNnJ4QjdlQTBFU05PR19LUUV3R2JQYTZET2Q3dHdnN3MwdFM4Vi03a1NrWkwzRVRRU1RnMkxQenpTVjNZNkFoZVVsc3VGOTItaHRVNkgwanlYUVhXRHB4TnVhZkphRk5HNnh3ZlZvMXJjUThicTFfTzQ3RndlVE05ck4tTERZUDlpRDI1QTF3S1RjNWJXRTR3VjhSNWlSaFBBdExlRTZmYXRDYU1tU2IwODgyZzBYOVNzeFEzTkpuakNzWFVnak5mbXI3b0NaMWRpM1R2UENnTENKVXo5M2xQRGxtWURHR1FvSEh2ME5FTV8yMmRhN3lxbVpVVk04MFprZVZBcEtpMDhwRndoczdrMjdTQWd5VU1YMHBzQi1CWWdaWFA3YWoyeGRmd01mLWZ3QWE2UmI4TTBPRWdCYlIzN1pIY19QdmZSSE10Ri1xQTFDOTlBOWhobWZsdUZlMDFqd0RrN0lOZlhyUXFlSWs5bVVPWDRjUWdiYnZkelpuZkpabHFnWkhTb1g4VUliVGpoa3ZFZkVxa1pFTzRlUk9qa2FiWFluUFZGNFpQT1JlSGdZUUdfaTFfOTF5NnF2bDVWaUt0UHNjS3hPSF9ZR282LVo5bC1iRmpJVXpSSnRFNWhPbnJyRzVtZTVaN1Q3aC1kT0N0bmxGQXFQLTQyZ1NwT3N3NFBweEE0ejVnS1JSUXR0Y1Q3VFhrWm1vaUpZc1hGTUZqcFRHeGRUQmV4akU3ZWZqQWFxX0VZRlhkOGlRTl9taFZSVDlnckZ3MW5oNTdaclhPM0ZaNjBBd1A1NHdlMXRGcGFVbjQyXzNmNUNLZ1k3eXoxNVVSN3BuWXI4T1paZ1JBQjVVNDJOdjlBdVZUWk1TM0ptOTlMbzlsTjBsV0p3REtnbDRaMzlPdERTVU5sVllIT2FTUllxSVkxMGVGNDl0V1B5c1NmQ01USi01c2RUeThXMnVWbGtGT3BselZMYVlJMHZMUWlQZmgxanY0LVc3ZGQ1TE15emJDeVZyVzZ6LWQ5Mjd4UkVKRTNIaFdGMWlUb2hfb2IzTnBVdHpXNmVJN25CUTR3NjZGckVxRlhGdjZndVRycTFZcHFpa1dqcG01aWx1d3RwcVp6SnFCVGFwVktIRWx4UlVMQkdRRVVwWktzU09EUVRwYUJ2d1UxaUJaeWFxVHpxS3c1eDF2ZUtXc1A2WFVMbUVIcERZQ0dLVzRzYW9YSmlhVkJQdWx5NjFPUXZQRmlZeDI0bEEyN202ZTBVUVpoVTlTOWQzMTlEbzhhWWQwSVdoOHZCVkZTM1Y4LVRESzY0NE11RENCZlZfZDJIM2NQNUd3VV9JOFdtd09WaF92bjdjcHpOUFFQUE1FY1RzbTM2VHNkWWlfaTFqTjUyRGVvSTBXT0tNNVY5VUJqdmNBMGhKeHZMbV9fZVBjd2ZZajNrUFQzODhnamx3Sy1faENlSHdUbUMzVXc0dnhNUmZFYTIxeEdLSXc1LVdwSXppLVhpSGl0UWhaUy1FRXdRVE1FZnFoNjAwdElxVUN6WmhrMllBSjNRcXEyNHozSHJFUmZxNERPNTR6M1J6V1E2TENVS2Y1QWMwM2pPYnFPeDI1eVdPV2N0RkF0SmhBZHFXWlpfYm0tb1FGV0JxOW9VZWtwMzRfVWktTWpUaWpJeW9oLWJLZmxNbnhBYTR6LW1TejNuRkxJejdHYzJPSVE0SnZqZkxlUGVRSVhZVE5OZjhuUmxhWm1WNmVHY2h4a1FmdkhMU0ZWMENyczE1MTdFZ1o3MWhicU56cEZnX0dPMVI1WHkzdUtmaGZLY2o0MUU1OTFkVHZwZTE4OC1XVmNNWjlrb093UlV6akZsUjlsQVVJbVpBRWdYamFrUi1oNDZSVDBPdWJuOEI0LUFoeGxPenpFTFhoSTA0c1lOZFBZWHR0RmU3MXhRVDY5NXRqQzh6WlN5VG13dlVqd2lMNFRjV1RXblJjWGM0dHhSY3lObFZyWmhtTVdIaTlodnJzVFhYZjhqa2lJaVBhbUpEYkxUQ2tuNk9CVFVOUXlJZ0psYURJQmRxNU4xNXlJbEJYTlR2RzdkLUduUDdNb2ljZkN4QXh3WnhfN0wzTmtSTGh1QUNlNTh5bXljSi1xSk96V1o5XzgxT3RzRVc2OThXb2lkRjhfOVlCNzdlX1hGalVIOUpXcUlFQVpQS1RDVVo3dEU2dnA4cDRXa0VvZlVaN2VXa2Z4cEJuZ2VaLUMyRVlGRDdEUDl0b0hGcDNucWtKLTJ0azRhNGlKS2diVHJqYnpqOTRXSGU5QXRUUktCWjhJdW5VSDJyV1hHUFFOR0lOb3FKVTlpSkFlSlphZ18wSnJ5WEtTeHBXbHB0UjVQZ05kb3UzUnc0Rm42dlFVMHotNk5mcWlqZlZyS1lINzhBYkp4cUZZUVFhZkFXZE1kNkVPZXRqMHlmU3RnUEFVS2N6UjBsSlg0MDJBZGJlZUh6cmw2RXRqNXU3QmktMGxuNUlCSVNsWVkzRGwtQl93eGlndVBUZWtsUDd0QUhFZ25YMlB6YjlhNzVndXVRN183UjZZdmQ3dFVCbnBHSVZuVVk4QUhYd0E2cWozbEU1dzU3cFFJWkRNV2N1dEU2RE1yc0JPbzVnUXRERl9sRUx6WTdZQjBkbzI1WWhnejNlbTdHbERJbnNqNmxwc1UwcVp0MFpkZnMxTHNZYWxUYUlmeWhkeE5vbXFGQTRXSlF2bkhLTXQtZWNzRnlTQ2tNRmVKeFJvcncyOW9iSGdnRTdENzBKU2trMzlVcEhXV2k5TmVzNWVOT28yN041Mk03OEF3dEdsbkd5c1VkTVFaeGN1SmQ4aVVUb1Z4WHZDdGFGOENMT3lGWEFHNGxTWVZxbkVLNXd3dnV1QzdOSE9vbmExUTJ5Y2VZVEF4VDZxMU04OFJ4WjZrREM4eGJ6dVRQVVJRZDhjRTdOV3FsSERlR29rd201OXYwT1ViU0RhTk9aWC1hbkFrbTdHMXZXTTYtZklyelVCOXFMRU90MkJvd3d5endJem1ob0pnUVRxdlZpWWY3NHpYTC04ay10UFJZaHZYS3NEQ0dPb1hpT2NUNDkwelBPNkplV1g0NkpUVkc5TlpNdl9vTnE2b0dTaWp4c1RYWnpSOEw3RUlLcHFNS0JhT3pwaGFvZThPLTk0eG8yZGUtWVN4Sm5BdDdSU2ZFRU1BRThjbkJVVUxuQlhsOGdZS3FuS0t5ZXl5eWdfNjZnUDNZQnVhc0RzLTFwV0J4VmR4blFaNVJxWVptNTBWR2M3cFlvYms2Ylh2QjhJaGFjdGRRN092QlVBTFZQdWlmcjdfZzFLWXgxS25iNGgzVG1JaWYtMlluTmM1SjJkbmdiUVBTQ0g5b285bUtpdWdNeUpfUzY0N3NZek00Q0Z2dGV1NlFMdUNsTzVtMWo0ajVMalVZLVBWQmxoeUhPUHRRLWlmMVcxUFBsa21JYUVuakVmZ2VpTDlmekdzaWhSUlJQWnh2cVdnRy1MZnFsMjQ4RVhIWXh0MUd1VXlVdFpoY3hCLXVXenZPblFtWU9MZV9Vd1BuZ1E2R053ZExXWGdqTEJ3eXRGd2RGMGhvbVJwRUZPR0hWLU1jdklra0pCNUNjU20xdDlVdjdwaFdtQXQxUHZnUmtSSVo2RnlJWTVNM3hCdDB3S2stOGRObEJ4N2NwWC1sRzF6TTdjSzRJTVJWSU1RcnQwbHNlZ2VudXN0SmpULTFXUE1PSHp0UE82dXV0THhmRlBtRE00V2l0eWtZb3NxX0I1c3R3Mm9YVEdwTi00bXJMV2J2X1ZuUEdhYXRMNl92OExJMW95YjVqcUJEMzFmczhTVDczbldncENjYnFhMGw2TTBGZE56MWFqMkxxUi0yRjR5aWJrejZxWlBTRVRETkxWdzZmNVpzNmgtSFhPTmxjNzhGVWVBYWhlczYwODBIWXZGYTJBYkNrVm01WGF1ZlAzUnNILVpaSUVhU3ZQUU5aX1lzczl3R3ZoNzA1Z1U5SUNTWlZCbHpMNjlDYThwTlo3SDZPQTRJZ25VQT09)
          FCI_KEYSTORE_PASSWORD: Encrypted(Z0FBQUFBQmdZQjZwX2lucmJ3a2VfRnpERDdjRWxBTGFURjV2akhiT3FNSW9XZ0hsTW9fZW5wemZJSy1pbDcxbFpMcldsSXJvWnFOQ1dzNzN3RUNrOU82aDVzbEFEc0dKeG1UaVY1Q2dkVlZua1ZqNnN3TDFLOVk9)
          FCI_KEY_PASSWORD: Encrypted(Z0FBQUFBQmdZQjZwSHYtV0duMTBJSXlHZG5mQnlTVmJyVGI4TGkzUGlMRWhlZm9Bb1pPZVNDME55NGxTdTlIdnM0VE00Z1RBX3pJSHdOcjdDZTltLWtkYkJzTVh6TXR6TnhmRXVnU0phaTh4bXduZWtDc3VVdEk9)
          FCI_KEY_ALIAS: Encrypted(Z0FBQUFBQmdZQjZwSXhaOGpEVlN0NmtmQUNvckNLejhIQzQzSldhTWtYVzJhZUZCRVhET3JjaUlYbVlpb3lKNWxqUXdqUzFGekNGN0dSODBsYjBuOHFqVU9RR2x5eVRpVHc9PQ==)
          FCI_CERTIFICATE: Encrypted()
          FCI_CERTIFICATE_PASSWORD: Encrypted(Z0FBQUFBQmdZQjZwdHJlNU9KZHFvdTZLdzc0T1g1cUtWSHNMc24yYlJzenU0TWFNd21ZR2RyRVhpWWt6dmg2aVFCay1xaGZZYzkzSDJ0YVdqUm1aOTJfc3JGenJRQno5U3c9PQ==)
          FCI_PROVISIONING_PROFILE: Encrypted()
        flutter: stable
        xcode: latest
        cocoapods: default
      scripts:
        - |
          # set up key.properties
          echo $FCI_KEYSTORE | base64 --decode > $FCI_KEYSTORE_PATH
          cat >> "$FCI_BUILD_DIR/android/key.properties" <<EOF
          storePassword=$FCI_KEYSTORE_PASSWORD
          keyPassword=$FCI_KEY_PASSWORD
          keyAlias=$FCI_KEY_ALIAS
          storeFile=/tmp/keystore.keystore
          EOF
        - |
          # set up local properties
          echo "flutter.sdk=$HOME/programs/flutter" > "$FCI_BUILD_DIR/android/local.properties"
        - cd . && flutter packages pub get
        - flutter packages pub run build_runner build --delete-conflicting-outputs
        - cd . && flutter build appbundle --release -t lib/main_prod.dart --build-number=$BUILD_NUMBER
          --flavor=production
        - find . -name "Podfile" -execdir pod install \;
        - keychain initialize
        - |
          # set up provisioning profiles
          PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_HOME"
          PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
          echo ${FCI_PROVISIONING_PROFILE} | base64 --decode > "$PROFILE_PATH"
          echo "Saved provisioning profile $PROFILE_PATH"
        - |
          # set up signing certificate
          echo $FCI_CERTIFICATE | base64 --decode > /tmp/certificate.p12
          keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $FCI_CERTIFICATE_PASSWORD
        - cd . && flutter build ios --release -t lib/main_prod.dart --build-number=$BUILD_NUMBER
          --flavor=production --no-codesign
        - xcode-project use-profiles
        - cd . && xcode-project build-ipa --workspace "ios/Runner.xcworkspace" --scheme
          "Runner"
      artifacts:
        - build/**/outputs/**/*.apk
        - build/**/outputs/**/*.aab
        - build/**/outputs/**/mapping.txt
        - build/ios/ipa/*.ipa
        - /tmp/xcodebuild_logs/*.log
        - flutter_drive.log
    publishing:
      email:
        recipients:
          - milind.mevada@solutelabs.com
